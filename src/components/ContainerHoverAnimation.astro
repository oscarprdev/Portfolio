---
import { ContainerSize } from '../types';

type Props = {
	size: ContainerSize;
};

const { size } = Astro.props;
---

<div
	id="container"
	class:list={[
		'container',
		{ sm: size === ContainerSize.sm, md: size === ContainerSize.md, lg: size === ContainerSize.lg },
	]}>
	<slot />
</div>

<style>
	.container {
		position: relative;
		border: 1px solid;
		border-radius: 2rem;
		padding: 0.6rem;
		overflow: hidden;
		cursor: none;
	}

	@keyframes ball-appearing {
		from {
			opacity: 0;
			transform: scale(0);
		}
		to {
			opacity: 0.9;
			transform: scale(250%);
		}
	}

	@keyframes ball-dissapearing {
		from {
			opacity: 0.9;
			transform: scale(250%);
		}
		to {
			opacity: 0;
			transform: scale(0%);
		}
	}
</style>

<script>
	import { ContainerSize } from '../types';

	const containers = document.querySelectorAll('#container');

	containers.forEach(container => {
		container.addEventListener('mouseenter', e => {
			const theme = localStorage.getItem('theme');

			const event = e as MouseEvent;
			const rect = container.getBoundingClientRect();

			const x = event.clientX - rect.left;
			const y = event.clientY - rect.top;

			const containerClass = container.getAttribute('class');

			let size: number;

			switch (true) {
				case containerClass?.includes(ContainerSize.sm):
					size = 40;
					break;
				case containerClass?.includes(ContainerSize.md):
					size = 200;
					break;
				default:
					size = 0;
					break;
			}

			if (!size) return;

			const ball = document.createElement('div');
			ball.setAttribute('id', 'ball');

			ball.style.top = `${y - size / 2}px`;
			ball.style.left = `${x - size / 2}px`;
			ball.style.position = 'absolute';
			ball.style.width = `${size}px`;
			ball.style.height = `${size}px`;
			ball.style.transform = 'translate(50%, 50%)';
			ball.style.backgroundColor = theme && theme === 'dark' ? 'white' : 'black';
			ball.style.borderRadius = '100%';
			ball.style.animation = 'ball-appearing 0.5s ease forwards';

			container.appendChild(ball);
		});

		container.addEventListener('mouseleave', () => {
			const ball = container.querySelector('#ball');
			if (ball && ball instanceof HTMLDivElement) {
				ball.style.animation = 'ball-dissapearing 0.3s ease forwards';

				container.removeChild(ball);
			}
		});
	});
</script>
